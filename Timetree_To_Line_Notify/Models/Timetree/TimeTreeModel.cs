// Generated by https://quicktype.io

namespace TimeTreeModel
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json;
    using System.Text.Json.Serialization;

    public partial class Data
    {
        [ JsonPropertyName("data") ]
        public Datum[] DataData { get; set; }
    }

    public partial class Datum
    {
        [ JsonPropertyName("id") ]
        public string Id { get; set; }

        [ JsonPropertyName("type") ]
        public string Type { get; set; }

        [ JsonPropertyName("attributes") ]
        public Attributes Attributes { get; set; }

        [ JsonPropertyName("relationships") ]
        public Relationships Relationships { get; set; }
    }

    public partial class Attributes
    {
        [ JsonPropertyName("title") ]
        public string Title { get; set; }

        [ JsonPropertyName("all_day") ]
        public bool AllDay { get; set; }

        [ JsonPropertyName("start_at") ]
        public DateTimeOffset StartAt { get; set; }

        [ JsonPropertyName("start_timezone") ]
        public string StartTimezone { get; set; }

        [ JsonPropertyName("end_at") ]
        public DateTimeOffset EndAt { get; set; }

        [ JsonPropertyName("end_timezone") ]
        public string EndTimezone { get; set; }

        [ JsonPropertyName("location") ]
        public string Location { get; set; }

        [ JsonPropertyName("location_lat") ]
        public object LocationLat { get; set; }

        [ JsonPropertyName("location_lon") ]
        public object LocationLon { get; set; }

        [ JsonPropertyName("url") ]
        public Uri Url { get; set; }

        [ JsonPropertyName("updated_at") ]
        public DateTimeOffset UpdatedAt { get; set; }

        [ JsonPropertyName("created_at") ]
        public DateTimeOffset CreatedAt { get; set; }

        [ JsonPropertyName("category") ]
        public string Category { get; set; }

        [ JsonPropertyName("description") ]
        public object Description { get; set; }

        [ JsonPropertyName("recurrence") ]
        public object Recurrence { get; set; }

        [ JsonPropertyName("recurring_uuid") ]
        public object RecurringUuid { get; set; }
    }

    public partial class Relationships
    {
        [ JsonPropertyName("label") ]
        public Creator Label { get; set; }

        [ JsonPropertyName("creator") ]
        public Creator Creator { get; set; }

        [ JsonPropertyName("attendees") ]
        public Attendees Attendees { get; set; }
    }

    public partial class Attendees
    {
        [ JsonPropertyName("data") ]
        public Dat[] Data { get; set; }
    }

    public partial class Dat
    {
        [ JsonPropertyName("id") ]
        public string Id { get; set; }

        [ JsonPropertyName("type") ]
        public string Type { get; set; }
    }

    public partial class Creator
    {
        [ JsonPropertyName("data") ]
        public Dat Data { get; set; }
    }

    public partial class Data
    {
        public static Data FromJson(string json) =>
            JsonSerializer.Deserialize<Data>(json, TimeTreeModel.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Data self) => JsonSerializer.Serialize(self, TimeTreeModel.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.Web)
        {
            Converters =
            {
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
            },
        };
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;

        public DateOnlyConverter() : this(null)
        {
        }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null)
        {
        }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }
}